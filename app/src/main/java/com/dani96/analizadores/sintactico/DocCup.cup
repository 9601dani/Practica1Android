/*SECCIÓN 1: CÓDIGO*/
/*CODIGO PARA LA CREACIÓN DEL CUP:
java -jar java-cup-11b.jar -parser DocCup /home/daniel/IntelliJIDEAProjects/MyApplication1/app/src/main/java/com/example/analizadores/sintactico/DocCup.cup
*/

/* TEXTO PARA PRUEBAS
Def Barras {
    titulo: "titulo de prueba";
    ejex: ["eje 1", "eje 2"];
    ejey: [3,4+2];
    unir:[{1,2},{1,1}];
}

*/

package com.example.analizadores.sintactico;

import java_cup.runtime.*;
import com.example.analizadores.lexico.DocFlex;

parser code {:

    public DocCup(DocFlex lexer) {
        super(lexer);
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.out.println("public void unrecoveredsyntax_error");
        }
    }

    int def = 0;
    public void incrementarDef(){
        def++;
        System.out.println(def);
    }

:}

/*SECCIÓN DE TERMINALES*/
terminal DEF, BARRAS, PIE, COMA, TITULO, EJEX, EJEY, ETIQUETAS, VALORES, UNIR;
terminal TIPO, CANTIDAD, PORCENTAJE, TOTAL, EXTRA,/* EJECUTAR,*/ CADENA;
terminal SIGNO_MAS, SIGNO_MENOS, SIGNO_POR, SIGNO_DIVISION, DOS_PUNTOS, PUNTO_COMA, PARENTESIS_ABIERTO;
terminal PARENTESIS_CERRADO, CORCHETE_ABIERTO, CORCHETE_CERRADO, LLAVE_ABIERTA, LLAVE_CERRADA;
terminal ENTERO, DECIMAL;

/*SECCIÓN DE NO TERMINALES*/
non terminal D, G, BA, PA, T, X, Y, U, C, TUP, VAL, ENT, N, S, TP, TOT/*, EJ*/;
non terminal E, EX, V, LN, SE;

/*GRAMÁTICA TIPO 2: REGLAS SINTÁCTICAS*/
start with D;

D ::= DEF G                          {:incrementarDef();:}
    ;

G ::= BARRAS LLAVE_ABIERTA BA LLAVE_CERRADA         {:System.out.println("PROBANDO BARRAS CON LLAVES");:}
    | PIE LLAVE_ABIERTA PA LLAVE_CERRADA
    | error G                           {:System.out.println("ERROR EN G");:}
    ;

BA ::= T X Y U
    | T X U Y
    | T Y X U
    | T Y U X
    | T U X Y
    | T U Y X
    | X T Y U
    | X T U Y
    | X Y T U
    | X Y U T
    | X U T Y
    | X U Y T
    | Y T X U
    | Y T U X
    | Y X T U
    | Y X U T
    | Y U T X
    | Y U X T
    | U T X Y
    | U T Y X
    | U X T Y
    | U X Y T
    | U Y T X
    | U Y X T
    | error BA                          {:System.out.println("ERROR EN BA");:}
    ;
T ::= TITULO DOS_PUNTOS CADENA PUNTO_COMA
    ;

X ::= EJEX DOS_PUNTOS CORCHETE_ABIERTO C CORCHETE_CERRADO PUNTO_COMA
    ;

C ::= CADENA
    | CADENA COMA C
    ;

Y ::= EJEY DOS_PUNTOS CORCHETE_ABIERTO LN CORCHETE_CERRADO PUNTO_COMA
    ;

LN ::= N COMA LN
    | N
    ;

N ::= ENTERO
    | PARENTESIS_ABIERTO ENTERO PARENTESIS_CERRADO S
    | PARENTESIS_ABIERTO ENTERO S PARENTESIS_CERRADO S
    | ENTERO S
    | DECIMAL
    | PARENTESIS_ABIERTO DECIMAL PARENTESIS_CERRADO S
    | PARENTESIS_ABIERTO DECIMAL S PARENTESIS_CERRADO S
    | DECIMAL S
    ;

S ::= SIGNO_MAS N
    | SIGNO_MENOS N
    | SIGNO_POR N
    | SIGNO_DIVISION N
    ;

U ::= UNIR DOS_PUNTOS CORCHETE_ABIERTO TUP CORCHETE_CERRADO PUNTO_COMA
    ;

TUP ::= LLAVE_ABIERTA VAL LLAVE_CERRADA
    | LLAVE_ABIERTA VAL LLAVE_CERRADA COMA TUP
    ;

VAL ::= ENT COMA ENT
    ;

ENT ::= ENTERO
    | PARENTESIS_ABIERTO ENTERO PARENTESIS_CERRADO SE
    | PARENTESIS_ABIERTO ENTERO SE PARENTESIS_CERRADO SE
    | ENTERO SE
    ;

SE ::= SIGNO_MAS ENT
    | SIGNO_MENOS ENT
    | SIGNO_POR ENT
    | SIGNO_DIVISION ENT
    ;

/*EJ ::= EJECUTAR PARENTESIS_ABIERTO CADENA PARENTESIS_CERRADO PUNTO_COMA;*/

PA ::= T TP E V EX
    | T TP E EX V
    | T TP V E EX
    | T TP V EX E
    | T TP EX E V
    | T TP EX V E
    | T E TP V EX
    | T E TP EX V
    | T E V TP EX
    | T E V EX TP
    | T E EX TP V
    | T E EX V TP
    | T V TP E EX
    | T V TP EX E
    | T V E TP EX
    | T V E EX TP
    | T V EX TP E
    | T V EX E TP
    | T EX TP E V
    | T EX TP V E
    | T EX E TP V
    | T EX E V TP
    | T EX V TP E
    | T EX V E TP
    | TP T E V EX
    | TP T E EX V
    | TP T V E EX
    | TP T V EX E
    | TP T EX E V
    | TP T EX V E
    | TP E T V EX
    | TP E T EX V
    | TP E V T EX
    | TP E V EX T
    | TP E EX T V
    | TP E EX V T
    | TP V T E EX
    | TP V T EX E
    | TP V E T EX
    | TP V E EX T
    | TP V EX T E
    | TP V EX E T
    | TP EX T E V
    | TP EX T V E
    | TP EX E T V
    | TP EX E V T
    | TP EX V T E
    | TP EX V E T
    | E T TP V EX
    | E T TP EX V
    | E T V TP EX
    | E T V EX TP
    | E T EX TP V
    | E T EX V TP
    | E TP T V EX
    | E TP T EX V
    | E TP V T EX
    | E TP V EX T
    | E TP EX T V
    | E TP EX V T
    | E V T TP EX
    | E V T EX TP
    | E V TP T EX
    | E V TP EX T
    | E V EX T TP
    | E V EX TP T
    | E EX T TP V
    | E EX T V TP
    | E EX TP T V
    | E EX TP V T
    | E EX V T TP
    | E EX V TP T
    | V T TP E EX
    | V T TP EX E
    | V T E TP EX
    | V T E EX TP
    | V T EX TP E
    | V T EX E TP
    | V TP T E EX
    | V TP T EX E
    | V TP E T EX
    | V TP E EX T
    | V TP EX T E
    | V TP EX E T
    | V E T TP EX
    | V E T EX TP
    | V E TP T EX
    | V E TP EX T
    | V E EX T TP
    | V E EX TP T
    | V EX T TP E
    | V EX T E TP
    | V EX TP T E
    | V EX TP E T
    | V EX E T TP
    | V EX E TP T
    | EX T TP E V
    | EX T TP V E
    | EX T E TP V
    | EX T E V TP
    | EX T V TP E
    | EX T V E TP
    | EX TP T E V
    | EX TP T V E
    | EX TP E T V
    | EX TP E V T
    | EX TP V T E
    | EX TP V E T
    | EX E T TP V
    | EX E T V TP
    | EX E TP T V
    | EX E TP V T
    | EX E V T TP
    | EX E V TP T
    | EX V T TP E
    | EX V T E TP
    | EX V TP T E
    | EX V TP E T
    | EX V E T TP
    | EX V E TP T
    ;

TP ::= TIPO DOS_PUNTOS CANTIDAD PUNTO_COMA TOT
    | TIPO DOS_PUNTOS PORCENTAJE PUNTO_COMA
    ;

TOT ::= TOTAL DOS_PUNTOS N PUNTO_COMA
    ;

E ::= ETIQUETAS DOS_PUNTOS CORCHETE_ABIERTO C CORCHETE_CERRADO PUNTO_COMA
    ;

EX ::= EXTRA DOS_PUNTOS CADENA PUNTO_COMA
    ;

V ::= VALORES DOS_PUNTOS CORCHETE_ABIERTO N CORCHETE_CERRADO PUNTO_COMA
    ;